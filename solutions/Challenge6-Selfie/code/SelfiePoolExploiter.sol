pragma solidity ^0.8.0;

import "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";
import "./SimpleGovernance.sol";
import "./SelfiePool.sol";
import "../DamnValuableTokenSnapshot.sol";

/// I think we need to call it and later execute it in two different flashloans

contract SelfiePoolExploiter is IERC3156FlashBorrower {

    ERC20Snapshot public immutable token;
    SimpleGovernance public immutable governance;
    SelfiePool public immutable selfie;
    address public immutable owner;
    bool private proposalMade;

    constructor(address _token, address _governance, address _selfie, address _owner) {
        token = ERC20Snapshot(_token);
        governance = SimpleGovernance(_governance);
        selfie = SelfiePool(_selfie);
        owner = _owner;
    }

    function initFlashLoan() external {
        require(msg.sender == owner, 'owner initiates flashloans');
    }
    
    function onFlashLoan(
        address initiator,
        address token,
        uint256 amount,
        uint256 fee,
        bytes calldata data
    ) external returns (bytes32) {
        proposalMade ? executeProposal() : executeAction();
    }

    function executeProposal() private {
        governance.queueAction(address(selfie), 0, '0x')
    }

    function executeAction() private {

    }

}